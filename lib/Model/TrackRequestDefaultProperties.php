<?php
/**
 * TrackRequestDefaultProperties
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ours
 *
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@oursprivacy.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TrackRequestDefaultProperties Class Doc Comment
 *
 * @category Class
 * @description These properties are used throughout the Ours app to pass known values onto destinations
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrackRequestDefaultProperties implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'track_request_defaultProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'is_bot' => 'bool',
        'ad_id' => 'string',
        'encoding' => 'string',
        'browser_name' => 'string',
        'browser_version' => 'string',
        'cpu_architecture' => 'string',
        'device_type' => 'string',
        'device_model' => 'string',
        'device_vendor' => 'string',
        'engine_name' => 'string',
        'engine_version' => 'string',
        'os_name' => 'string',
        'os_version' => 'string',
        'browser_language' => 'string',
        'current_url' => 'string',
        'webview' => 'bool',
        'iframe' => 'bool',
        'session_count' => 'float',
        'active_duration' => 'float',
        'duration' => 'float',
        'epik' => 'string',
        'sacid' => 'string',
        'fbc' => 'string',
        'fbclid' => 'string',
        'fbclid_creation_time' => 'float',
        'fbp' => 'string',
        'gad_source' => 'string',
        'gbraid' => 'string',
        'gc_id' => 'string',
        'gclid' => 'string',
        'rdt_cid' => 'string',
        'host' => 'string',
        'ip' => 'string',
        'msclkid' => 'string',
        'li_fat_id' => 'string',
        'pathname' => 'string',
        'referrer' => 'string',
        'screen_height' => 'float',
        'screen_width' => 'float',
        'title' => 'string',
        'user_agent' => 'string',
        'user_agent_full_list' => 'string',
        'utm_campaign' => 'string',
        'utm_content' => 'string',
        'utm_medium' => 'string',
        'utm_name' => 'string',
        'ttclid' => 'string',
        'utm_source' => 'string',
        'utm_term' => 'string',
        'version' => 'string',
        'wbraid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'is_bot' => null,
        'ad_id' => null,
        'encoding' => null,
        'browser_name' => null,
        'browser_version' => null,
        'cpu_architecture' => null,
        'device_type' => null,
        'device_model' => null,
        'device_vendor' => null,
        'engine_name' => null,
        'engine_version' => null,
        'os_name' => null,
        'os_version' => null,
        'browser_language' => null,
        'current_url' => null,
        'webview' => null,
        'iframe' => null,
        'session_count' => null,
        'active_duration' => null,
        'duration' => null,
        'epik' => null,
        'sacid' => null,
        'fbc' => null,
        'fbclid' => null,
        'fbclid_creation_time' => null,
        'fbp' => null,
        'gad_source' => null,
        'gbraid' => null,
        'gc_id' => null,
        'gclid' => null,
        'rdt_cid' => null,
        'host' => null,
        'ip' => null,
        'msclkid' => null,
        'li_fat_id' => null,
        'pathname' => null,
        'referrer' => null,
        'screen_height' => null,
        'screen_width' => null,
        'title' => null,
        'user_agent' => null,
        'user_agent_full_list' => null,
        'utm_campaign' => null,
        'utm_content' => null,
        'utm_medium' => null,
        'utm_name' => null,
        'ttclid' => null,
        'utm_source' => null,
        'utm_term' => null,
        'version' => null,
        'wbraid' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'is_bot' => true,
        'ad_id' => true,
        'encoding' => true,
        'browser_name' => true,
        'browser_version' => true,
        'cpu_architecture' => true,
        'device_type' => true,
        'device_model' => true,
        'device_vendor' => true,
        'engine_name' => true,
        'engine_version' => true,
        'os_name' => true,
        'os_version' => true,
        'browser_language' => true,
        'current_url' => true,
        'webview' => true,
        'iframe' => true,
        'session_count' => true,
        'active_duration' => true,
        'duration' => true,
        'epik' => true,
        'sacid' => true,
        'fbc' => true,
        'fbclid' => true,
        'fbclid_creation_time' => true,
        'fbp' => true,
        'gad_source' => true,
        'gbraid' => true,
        'gc_id' => true,
        'gclid' => true,
        'rdt_cid' => true,
        'host' => true,
        'ip' => true,
        'msclkid' => true,
        'li_fat_id' => true,
        'pathname' => true,
        'referrer' => true,
        'screen_height' => true,
        'screen_width' => true,
        'title' => true,
        'user_agent' => true,
        'user_agent_full_list' => true,
        'utm_campaign' => true,
        'utm_content' => true,
        'utm_medium' => true,
        'utm_name' => true,
        'ttclid' => true,
        'utm_source' => true,
        'utm_term' => true,
        'version' => true,
        'wbraid' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_bot' => 'is_bot',
        'ad_id' => 'ad_id',
        'encoding' => 'encoding',
        'browser_name' => 'browser_name',
        'browser_version' => 'browser_version',
        'cpu_architecture' => 'cpu_architecture',
        'device_type' => 'device_type',
        'device_model' => 'device_model',
        'device_vendor' => 'device_vendor',
        'engine_name' => 'engine_name',
        'engine_version' => 'engine_version',
        'os_name' => 'os_name',
        'os_version' => 'os_version',
        'browser_language' => 'browser_language',
        'current_url' => 'current_url',
        'webview' => 'webview',
        'iframe' => 'iframe',
        'session_count' => 'sessionCount',
        'active_duration' => 'activeDuration',
        'duration' => 'duration',
        'epik' => 'epik',
        'sacid' => 'sacid',
        'fbc' => 'fbc',
        'fbclid' => 'fbclid',
        'fbclid_creation_time' => 'fbclid_creation_time',
        'fbp' => 'fbp',
        'gad_source' => 'gad_source',
        'gbraid' => 'gbraid',
        'gc_id' => 'gc_id',
        'gclid' => 'gclid',
        'rdt_cid' => 'rdt_cid',
        'host' => 'host',
        'ip' => 'ip',
        'msclkid' => 'msclkid',
        'li_fat_id' => 'li_fat_id',
        'pathname' => 'pathname',
        'referrer' => 'referrer',
        'screen_height' => 'screen_height',
        'screen_width' => 'screen_width',
        'title' => 'title',
        'user_agent' => 'user_agent',
        'user_agent_full_list' => 'user_agent_full_list',
        'utm_campaign' => 'utm_campaign',
        'utm_content' => 'utm_content',
        'utm_medium' => 'utm_medium',
        'utm_name' => 'utm_name',
        'ttclid' => 'ttclid',
        'utm_source' => 'utm_source',
        'utm_term' => 'utm_term',
        'version' => 'version',
        'wbraid' => 'wbraid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_bot' => 'setIsBot',
        'ad_id' => 'setAdId',
        'encoding' => 'setEncoding',
        'browser_name' => 'setBrowserName',
        'browser_version' => 'setBrowserVersion',
        'cpu_architecture' => 'setCpuArchitecture',
        'device_type' => 'setDeviceType',
        'device_model' => 'setDeviceModel',
        'device_vendor' => 'setDeviceVendor',
        'engine_name' => 'setEngineName',
        'engine_version' => 'setEngineVersion',
        'os_name' => 'setOsName',
        'os_version' => 'setOsVersion',
        'browser_language' => 'setBrowserLanguage',
        'current_url' => 'setCurrentUrl',
        'webview' => 'setWebview',
        'iframe' => 'setIframe',
        'session_count' => 'setSessionCount',
        'active_duration' => 'setActiveDuration',
        'duration' => 'setDuration',
        'epik' => 'setEpik',
        'sacid' => 'setSacid',
        'fbc' => 'setFbc',
        'fbclid' => 'setFbclid',
        'fbclid_creation_time' => 'setFbclidCreationTime',
        'fbp' => 'setFbp',
        'gad_source' => 'setGadSource',
        'gbraid' => 'setGbraid',
        'gc_id' => 'setGcId',
        'gclid' => 'setGclid',
        'rdt_cid' => 'setRdtCid',
        'host' => 'setHost',
        'ip' => 'setIp',
        'msclkid' => 'setMsclkid',
        'li_fat_id' => 'setLiFatId',
        'pathname' => 'setPathname',
        'referrer' => 'setReferrer',
        'screen_height' => 'setScreenHeight',
        'screen_width' => 'setScreenWidth',
        'title' => 'setTitle',
        'user_agent' => 'setUserAgent',
        'user_agent_full_list' => 'setUserAgentFullList',
        'utm_campaign' => 'setUtmCampaign',
        'utm_content' => 'setUtmContent',
        'utm_medium' => 'setUtmMedium',
        'utm_name' => 'setUtmName',
        'ttclid' => 'setTtclid',
        'utm_source' => 'setUtmSource',
        'utm_term' => 'setUtmTerm',
        'version' => 'setVersion',
        'wbraid' => 'setWbraid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_bot' => 'getIsBot',
        'ad_id' => 'getAdId',
        'encoding' => 'getEncoding',
        'browser_name' => 'getBrowserName',
        'browser_version' => 'getBrowserVersion',
        'cpu_architecture' => 'getCpuArchitecture',
        'device_type' => 'getDeviceType',
        'device_model' => 'getDeviceModel',
        'device_vendor' => 'getDeviceVendor',
        'engine_name' => 'getEngineName',
        'engine_version' => 'getEngineVersion',
        'os_name' => 'getOsName',
        'os_version' => 'getOsVersion',
        'browser_language' => 'getBrowserLanguage',
        'current_url' => 'getCurrentUrl',
        'webview' => 'getWebview',
        'iframe' => 'getIframe',
        'session_count' => 'getSessionCount',
        'active_duration' => 'getActiveDuration',
        'duration' => 'getDuration',
        'epik' => 'getEpik',
        'sacid' => 'getSacid',
        'fbc' => 'getFbc',
        'fbclid' => 'getFbclid',
        'fbclid_creation_time' => 'getFbclidCreationTime',
        'fbp' => 'getFbp',
        'gad_source' => 'getGadSource',
        'gbraid' => 'getGbraid',
        'gc_id' => 'getGcId',
        'gclid' => 'getGclid',
        'rdt_cid' => 'getRdtCid',
        'host' => 'getHost',
        'ip' => 'getIp',
        'msclkid' => 'getMsclkid',
        'li_fat_id' => 'getLiFatId',
        'pathname' => 'getPathname',
        'referrer' => 'getReferrer',
        'screen_height' => 'getScreenHeight',
        'screen_width' => 'getScreenWidth',
        'title' => 'getTitle',
        'user_agent' => 'getUserAgent',
        'user_agent_full_list' => 'getUserAgentFullList',
        'utm_campaign' => 'getUtmCampaign',
        'utm_content' => 'getUtmContent',
        'utm_medium' => 'getUtmMedium',
        'utm_name' => 'getUtmName',
        'ttclid' => 'getTtclid',
        'utm_source' => 'getUtmSource',
        'utm_term' => 'getUtmTerm',
        'version' => 'getVersion',
        'wbraid' => 'getWbraid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('is_bot', $data ?? [], null);
        $this->setIfExists('ad_id', $data ?? [], null);
        $this->setIfExists('encoding', $data ?? [], null);
        $this->setIfExists('browser_name', $data ?? [], null);
        $this->setIfExists('browser_version', $data ?? [], null);
        $this->setIfExists('cpu_architecture', $data ?? [], null);
        $this->setIfExists('device_type', $data ?? [], null);
        $this->setIfExists('device_model', $data ?? [], null);
        $this->setIfExists('device_vendor', $data ?? [], null);
        $this->setIfExists('engine_name', $data ?? [], null);
        $this->setIfExists('engine_version', $data ?? [], null);
        $this->setIfExists('os_name', $data ?? [], null);
        $this->setIfExists('os_version', $data ?? [], null);
        $this->setIfExists('browser_language', $data ?? [], null);
        $this->setIfExists('current_url', $data ?? [], null);
        $this->setIfExists('webview', $data ?? [], null);
        $this->setIfExists('iframe', $data ?? [], null);
        $this->setIfExists('session_count', $data ?? [], null);
        $this->setIfExists('active_duration', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('epik', $data ?? [], null);
        $this->setIfExists('sacid', $data ?? [], null);
        $this->setIfExists('fbc', $data ?? [], null);
        $this->setIfExists('fbclid', $data ?? [], null);
        $this->setIfExists('fbclid_creation_time', $data ?? [], null);
        $this->setIfExists('fbp', $data ?? [], null);
        $this->setIfExists('gad_source', $data ?? [], null);
        $this->setIfExists('gbraid', $data ?? [], null);
        $this->setIfExists('gc_id', $data ?? [], null);
        $this->setIfExists('gclid', $data ?? [], null);
        $this->setIfExists('rdt_cid', $data ?? [], null);
        $this->setIfExists('host', $data ?? [], null);
        $this->setIfExists('ip', $data ?? [], null);
        $this->setIfExists('msclkid', $data ?? [], null);
        $this->setIfExists('li_fat_id', $data ?? [], null);
        $this->setIfExists('pathname', $data ?? [], null);
        $this->setIfExists('referrer', $data ?? [], null);
        $this->setIfExists('screen_height', $data ?? [], null);
        $this->setIfExists('screen_width', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('user_agent', $data ?? [], null);
        $this->setIfExists('user_agent_full_list', $data ?? [], null);
        $this->setIfExists('utm_campaign', $data ?? [], null);
        $this->setIfExists('utm_content', $data ?? [], null);
        $this->setIfExists('utm_medium', $data ?? [], null);
        $this->setIfExists('utm_name', $data ?? [], null);
        $this->setIfExists('ttclid', $data ?? [], null);
        $this->setIfExists('utm_source', $data ?? [], null);
        $this->setIfExists('utm_term', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
        $this->setIfExists('wbraid', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['ad_id']) && (mb_strlen($this->container['ad_id']) > 2000)) {
            $invalidProperties[] = "invalid value for 'ad_id', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['encoding']) && (mb_strlen($this->container['encoding']) > 2000)) {
            $invalidProperties[] = "invalid value for 'encoding', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['browser_name']) && (mb_strlen($this->container['browser_name']) > 2000)) {
            $invalidProperties[] = "invalid value for 'browser_name', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['browser_version']) && (mb_strlen($this->container['browser_version']) > 2000)) {
            $invalidProperties[] = "invalid value for 'browser_version', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['cpu_architecture']) && (mb_strlen($this->container['cpu_architecture']) > 2000)) {
            $invalidProperties[] = "invalid value for 'cpu_architecture', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['device_type']) && (mb_strlen($this->container['device_type']) > 2000)) {
            $invalidProperties[] = "invalid value for 'device_type', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['device_model']) && (mb_strlen($this->container['device_model']) > 2000)) {
            $invalidProperties[] = "invalid value for 'device_model', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['device_vendor']) && (mb_strlen($this->container['device_vendor']) > 2000)) {
            $invalidProperties[] = "invalid value for 'device_vendor', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['engine_name']) && (mb_strlen($this->container['engine_name']) > 2000)) {
            $invalidProperties[] = "invalid value for 'engine_name', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['engine_version']) && (mb_strlen($this->container['engine_version']) > 2000)) {
            $invalidProperties[] = "invalid value for 'engine_version', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['os_name']) && (mb_strlen($this->container['os_name']) > 2000)) {
            $invalidProperties[] = "invalid value for 'os_name', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['os_version']) && (mb_strlen($this->container['os_version']) > 2000)) {
            $invalidProperties[] = "invalid value for 'os_version', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['browser_language']) && (mb_strlen($this->container['browser_language']) > 2000)) {
            $invalidProperties[] = "invalid value for 'browser_language', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['current_url']) && (mb_strlen($this->container['current_url']) > 3000)) {
            $invalidProperties[] = "invalid value for 'current_url', the character length must be smaller than or equal to 3000.";
        }

        if (!is_null($this->container['epik']) && (mb_strlen($this->container['epik']) > 2000)) {
            $invalidProperties[] = "invalid value for 'epik', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['sacid']) && (mb_strlen($this->container['sacid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'sacid', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['fbc']) && (mb_strlen($this->container['fbc']) > 2000)) {
            $invalidProperties[] = "invalid value for 'fbc', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['fbclid']) && (mb_strlen($this->container['fbclid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'fbclid', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['fbp']) && (mb_strlen($this->container['fbp']) > 2000)) {
            $invalidProperties[] = "invalid value for 'fbp', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['gad_source']) && (mb_strlen($this->container['gad_source']) > 2000)) {
            $invalidProperties[] = "invalid value for 'gad_source', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['gbraid']) && (mb_strlen($this->container['gbraid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'gbraid', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['gc_id']) && (mb_strlen($this->container['gc_id']) > 2000)) {
            $invalidProperties[] = "invalid value for 'gc_id', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['gclid']) && (mb_strlen($this->container['gclid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'gclid', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['rdt_cid']) && (mb_strlen($this->container['rdt_cid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'rdt_cid', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['host']) && (mb_strlen($this->container['host']) > 2000)) {
            $invalidProperties[] = "invalid value for 'host', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['ip']) && (mb_strlen($this->container['ip']) > 2000)) {
            $invalidProperties[] = "invalid value for 'ip', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['msclkid']) && (mb_strlen($this->container['msclkid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'msclkid', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['li_fat_id']) && (mb_strlen($this->container['li_fat_id']) > 2000)) {
            $invalidProperties[] = "invalid value for 'li_fat_id', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['pathname']) && (mb_strlen($this->container['pathname']) > 2000)) {
            $invalidProperties[] = "invalid value for 'pathname', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['referrer']) && (mb_strlen($this->container['referrer']) > 3500)) {
            $invalidProperties[] = "invalid value for 'referrer', the character length must be smaller than or equal to 3500.";
        }

        if (!is_null($this->container['title']) && (mb_strlen($this->container['title']) > 2000)) {
            $invalidProperties[] = "invalid value for 'title', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['user_agent_full_list']) && (mb_strlen($this->container['user_agent_full_list']) > 2000)) {
            $invalidProperties[] = "invalid value for 'user_agent_full_list', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['utm_campaign']) && (mb_strlen($this->container['utm_campaign']) > 2000)) {
            $invalidProperties[] = "invalid value for 'utm_campaign', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['utm_content']) && (mb_strlen($this->container['utm_content']) > 2000)) {
            $invalidProperties[] = "invalid value for 'utm_content', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['utm_medium']) && (mb_strlen($this->container['utm_medium']) > 2000)) {
            $invalidProperties[] = "invalid value for 'utm_medium', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['utm_name']) && (mb_strlen($this->container['utm_name']) > 2000)) {
            $invalidProperties[] = "invalid value for 'utm_name', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['ttclid']) && (mb_strlen($this->container['ttclid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'ttclid', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['utm_source']) && (mb_strlen($this->container['utm_source']) > 2000)) {
            $invalidProperties[] = "invalid value for 'utm_source', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['utm_term']) && (mb_strlen($this->container['utm_term']) > 2000)) {
            $invalidProperties[] = "invalid value for 'utm_term', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['version']) && (mb_strlen($this->container['version']) > 2000)) {
            $invalidProperties[] = "invalid value for 'version', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['wbraid']) && (mb_strlen($this->container['wbraid']) > 2000)) {
            $invalidProperties[] = "invalid value for 'wbraid', the character length must be smaller than or equal to 2000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_bot
     *
     * @return bool|null
     */
    public function getIsBot()
    {
        return $this->container['is_bot'];
    }

    /**
     * Sets is_bot
     *
     * @param bool|null $is_bot is_bot
     *
     * @return self
     */
    public function setIsBot($is_bot)
    {
        if (is_null($is_bot)) {
            array_push($this->openAPINullablesSetToNull, 'is_bot');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_bot', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_bot'] = $is_bot;

        return $this;
    }

    /**
     * Gets ad_id
     *
     * @return string|null
     */
    public function getAdId()
    {
        return $this->container['ad_id'];
    }

    /**
     * Sets ad_id
     *
     * @param string|null $ad_id ad_id
     *
     * @return self
     */
    public function setAdId($ad_id)
    {
        if (is_null($ad_id)) {
            array_push($this->openAPINullablesSetToNull, 'ad_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ad_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ad_id) && (mb_strlen($ad_id) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $ad_id when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['ad_id'] = $ad_id;

        return $this;
    }

    /**
     * Gets encoding
     *
     * @return string|null
     */
    public function getEncoding()
    {
        return $this->container['encoding'];
    }

    /**
     * Sets encoding
     *
     * @param string|null $encoding The character encoding of the page. Ex: UTF-8
     *
     * @return self
     */
    public function setEncoding($encoding)
    {
        if (is_null($encoding)) {
            array_push($this->openAPINullablesSetToNull, 'encoding');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('encoding', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($encoding) && (mb_strlen($encoding) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $encoding when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['encoding'] = $encoding;

        return $this;
    }

    /**
     * Gets browser_name
     *
     * @return string|null
     */
    public function getBrowserName()
    {
        return $this->container['browser_name'];
    }

    /**
     * Sets browser_name
     *
     * @param string|null $browser_name browser_name
     *
     * @return self
     */
    public function setBrowserName($browser_name)
    {
        if (is_null($browser_name)) {
            array_push($this->openAPINullablesSetToNull, 'browser_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('browser_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($browser_name) && (mb_strlen($browser_name) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $browser_name when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['browser_name'] = $browser_name;

        return $this;
    }

    /**
     * Gets browser_version
     *
     * @return string|null
     */
    public function getBrowserVersion()
    {
        return $this->container['browser_version'];
    }

    /**
     * Sets browser_version
     *
     * @param string|null $browser_version browser_version
     *
     * @return self
     */
    public function setBrowserVersion($browser_version)
    {
        if (is_null($browser_version)) {
            array_push($this->openAPINullablesSetToNull, 'browser_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('browser_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($browser_version) && (mb_strlen($browser_version) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $browser_version when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['browser_version'] = $browser_version;

        return $this;
    }

    /**
     * Gets cpu_architecture
     *
     * @return string|null
     */
    public function getCpuArchitecture()
    {
        return $this->container['cpu_architecture'];
    }

    /**
     * Sets cpu_architecture
     *
     * @param string|null $cpu_architecture cpu_architecture
     *
     * @return self
     */
    public function setCpuArchitecture($cpu_architecture)
    {
        if (is_null($cpu_architecture)) {
            array_push($this->openAPINullablesSetToNull, 'cpu_architecture');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cpu_architecture', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cpu_architecture) && (mb_strlen($cpu_architecture) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $cpu_architecture when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['cpu_architecture'] = $cpu_architecture;

        return $this;
    }

    /**
     * Gets device_type
     *
     * @return string|null
     */
    public function getDeviceType()
    {
        return $this->container['device_type'];
    }

    /**
     * Sets device_type
     *
     * @param string|null $device_type \"mobile\" | \"tablet\" | \"console\" | \"smarttv\" | \"wearable\" | \"xr\" | \"embedded\"
     *
     * @return self
     */
    public function setDeviceType($device_type)
    {
        if (is_null($device_type)) {
            array_push($this->openAPINullablesSetToNull, 'device_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($device_type) && (mb_strlen($device_type) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $device_type when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['device_type'] = $device_type;

        return $this;
    }

    /**
     * Gets device_model
     *
     * @return string|null
     */
    public function getDeviceModel()
    {
        return $this->container['device_model'];
    }

    /**
     * Sets device_model
     *
     * @param string|null $device_model device_model
     *
     * @return self
     */
    public function setDeviceModel($device_model)
    {
        if (is_null($device_model)) {
            array_push($this->openAPINullablesSetToNull, 'device_model');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_model', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($device_model) && (mb_strlen($device_model) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $device_model when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['device_model'] = $device_model;

        return $this;
    }

    /**
     * Gets device_vendor
     *
     * @return string|null
     */
    public function getDeviceVendor()
    {
        return $this->container['device_vendor'];
    }

    /**
     * Sets device_vendor
     *
     * @param string|null $device_vendor device_vendor
     *
     * @return self
     */
    public function setDeviceVendor($device_vendor)
    {
        if (is_null($device_vendor)) {
            array_push($this->openAPINullablesSetToNull, 'device_vendor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('device_vendor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($device_vendor) && (mb_strlen($device_vendor) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $device_vendor when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['device_vendor'] = $device_vendor;

        return $this;
    }

    /**
     * Gets engine_name
     *
     * @return string|null
     */
    public function getEngineName()
    {
        return $this->container['engine_name'];
    }

    /**
     * Sets engine_name
     *
     * @param string|null $engine_name engine_name
     *
     * @return self
     */
    public function setEngineName($engine_name)
    {
        if (is_null($engine_name)) {
            array_push($this->openAPINullablesSetToNull, 'engine_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engine_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($engine_name) && (mb_strlen($engine_name) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $engine_name when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['engine_name'] = $engine_name;

        return $this;
    }

    /**
     * Gets engine_version
     *
     * @return string|null
     */
    public function getEngineVersion()
    {
        return $this->container['engine_version'];
    }

    /**
     * Sets engine_version
     *
     * @param string|null $engine_version engine_version
     *
     * @return self
     */
    public function setEngineVersion($engine_version)
    {
        if (is_null($engine_version)) {
            array_push($this->openAPINullablesSetToNull, 'engine_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('engine_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($engine_version) && (mb_strlen($engine_version) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $engine_version when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['engine_version'] = $engine_version;

        return $this;
    }

    /**
     * Gets os_name
     *
     * @return string|null
     */
    public function getOsName()
    {
        return $this->container['os_name'];
    }

    /**
     * Sets os_name
     *
     * @param string|null $os_name os_name
     *
     * @return self
     */
    public function setOsName($os_name)
    {
        if (is_null($os_name)) {
            array_push($this->openAPINullablesSetToNull, 'os_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('os_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($os_name) && (mb_strlen($os_name) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $os_name when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['os_name'] = $os_name;

        return $this;
    }

    /**
     * Gets os_version
     *
     * @return string|null
     */
    public function getOsVersion()
    {
        return $this->container['os_version'];
    }

    /**
     * Sets os_version
     *
     * @param string|null $os_version os_version
     *
     * @return self
     */
    public function setOsVersion($os_version)
    {
        if (is_null($os_version)) {
            array_push($this->openAPINullablesSetToNull, 'os_version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('os_version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($os_version) && (mb_strlen($os_version) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $os_version when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['os_version'] = $os_version;

        return $this;
    }

    /**
     * Gets browser_language
     *
     * @return string|null
     */
    public function getBrowserLanguage()
    {
        return $this->container['browser_language'];
    }

    /**
     * Sets browser_language
     *
     * @param string|null $browser_language browser_language
     *
     * @return self
     */
    public function setBrowserLanguage($browser_language)
    {
        if (is_null($browser_language)) {
            array_push($this->openAPINullablesSetToNull, 'browser_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('browser_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($browser_language) && (mb_strlen($browser_language) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $browser_language when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['browser_language'] = $browser_language;

        return $this;
    }

    /**
     * Gets current_url
     *
     * @return string|null
     */
    public function getCurrentUrl()
    {
        return $this->container['current_url'];
    }

    /**
     * Sets current_url
     *
     * @param string|null $current_url The full url (including query params) of the current page
     *
     * @return self
     */
    public function setCurrentUrl($current_url)
    {
        if (is_null($current_url)) {
            array_push($this->openAPINullablesSetToNull, 'current_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('current_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($current_url) && (mb_strlen($current_url) > 3000)) {
            throw new \InvalidArgumentException('invalid length for $current_url when calling TrackRequestDefaultProperties., must be smaller than or equal to 3000.');
        }

        $this->container['current_url'] = $current_url;

        return $this;
    }

    /**
     * Gets webview
     *
     * @return bool|null
     */
    public function getWebview()
    {
        return $this->container['webview'];
    }

    /**
     * Sets webview
     *
     * @param bool|null $webview webview
     *
     * @return self
     */
    public function setWebview($webview)
    {
        if (is_null($webview)) {
            array_push($this->openAPINullablesSetToNull, 'webview');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('webview', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['webview'] = $webview;

        return $this;
    }

    /**
     * Gets iframe
     *
     * @return bool|null
     */
    public function getIframe()
    {
        return $this->container['iframe'];
    }

    /**
     * Sets iframe
     *
     * @param bool|null $iframe iframe
     *
     * @return self
     */
    public function setIframe($iframe)
    {
        if (is_null($iframe)) {
            array_push($this->openAPINullablesSetToNull, 'iframe');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('iframe', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['iframe'] = $iframe;

        return $this;
    }

    /**
     * Gets session_count
     *
     * @return float|null
     */
    public function getSessionCount()
    {
        return $this->container['session_count'];
    }

    /**
     * Sets session_count
     *
     * @param float|null $session_count session_count
     *
     * @return self
     */
    public function setSessionCount($session_count)
    {
        if (is_null($session_count)) {
            array_push($this->openAPINullablesSetToNull, 'session_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('session_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['session_count'] = $session_count;

        return $this;
    }

    /**
     * Gets active_duration
     *
     * @return float|null
     */
    public function getActiveDuration()
    {
        return $this->container['active_duration'];
    }

    /**
     * Sets active_duration
     *
     * @param float|null $active_duration The active time in milliseconds that the user had this tab active
     *
     * @return self
     */
    public function setActiveDuration($active_duration)
    {
        if (is_null($active_duration)) {
            array_push($this->openAPINullablesSetToNull, 'active_duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active_duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active_duration'] = $active_duration;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return float|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param float|null $duration The time in milliseconds since the page was loaded // script was loaded
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            array_push($this->openAPINullablesSetToNull, 'duration');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('duration', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets epik
     *
     * @return string|null
     */
    public function getEpik()
    {
        return $this->container['epik'];
    }

    /**
     * Sets epik
     *
     * @param string|null $epik epik
     *
     * @return self
     */
    public function setEpik($epik)
    {
        if (is_null($epik)) {
            array_push($this->openAPINullablesSetToNull, 'epik');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('epik', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($epik) && (mb_strlen($epik) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $epik when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['epik'] = $epik;

        return $this;
    }

    /**
     * Gets sacid
     *
     * @return string|null
     */
    public function getSacid()
    {
        return $this->container['sacid'];
    }

    /**
     * Sets sacid
     *
     * @param string|null $sacid sacid
     *
     * @return self
     */
    public function setSacid($sacid)
    {
        if (is_null($sacid)) {
            array_push($this->openAPINullablesSetToNull, 'sacid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sacid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sacid) && (mb_strlen($sacid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $sacid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['sacid'] = $sacid;

        return $this;
    }

    /**
     * Gets fbc
     *
     * @return string|null
     */
    public function getFbc()
    {
        return $this->container['fbc'];
    }

    /**
     * Sets fbc
     *
     * @param string|null $fbc fbc
     *
     * @return self
     */
    public function setFbc($fbc)
    {
        if (is_null($fbc)) {
            array_push($this->openAPINullablesSetToNull, 'fbc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fbc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fbc) && (mb_strlen($fbc) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $fbc when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['fbc'] = $fbc;

        return $this;
    }

    /**
     * Gets fbclid
     *
     * @return string|null
     */
    public function getFbclid()
    {
        return $this->container['fbclid'];
    }

    /**
     * Sets fbclid
     *
     * @param string|null $fbclid fbclid
     *
     * @return self
     */
    public function setFbclid($fbclid)
    {
        if (is_null($fbclid)) {
            array_push($this->openAPINullablesSetToNull, 'fbclid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fbclid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fbclid) && (mb_strlen($fbclid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $fbclid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['fbclid'] = $fbclid;

        return $this;
    }

    /**
     * Gets fbclid_creation_time
     *
     * @return float|null
     */
    public function getFbclidCreationTime()
    {
        return $this->container['fbclid_creation_time'];
    }

    /**
     * Sets fbclid_creation_time
     *
     * @param float|null $fbclid_creation_time fbclid_creation_time
     *
     * @return self
     */
    public function setFbclidCreationTime($fbclid_creation_time)
    {
        if (is_null($fbclid_creation_time)) {
            array_push($this->openAPINullablesSetToNull, 'fbclid_creation_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fbclid_creation_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fbclid_creation_time'] = $fbclid_creation_time;

        return $this;
    }

    /**
     * Gets fbp
     *
     * @return string|null
     */
    public function getFbp()
    {
        return $this->container['fbp'];
    }

    /**
     * Sets fbp
     *
     * @param string|null $fbp fbp
     *
     * @return self
     */
    public function setFbp($fbp)
    {
        if (is_null($fbp)) {
            array_push($this->openAPINullablesSetToNull, 'fbp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fbp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($fbp) && (mb_strlen($fbp) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $fbp when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['fbp'] = $fbp;

        return $this;
    }

    /**
     * Gets gad_source
     *
     * @return string|null
     */
    public function getGadSource()
    {
        return $this->container['gad_source'];
    }

    /**
     * Sets gad_source
     *
     * @param string|null $gad_source gad_source
     *
     * @return self
     */
    public function setGadSource($gad_source)
    {
        if (is_null($gad_source)) {
            array_push($this->openAPINullablesSetToNull, 'gad_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gad_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gad_source) && (mb_strlen($gad_source) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $gad_source when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['gad_source'] = $gad_source;

        return $this;
    }

    /**
     * Gets gbraid
     *
     * @return string|null
     */
    public function getGbraid()
    {
        return $this->container['gbraid'];
    }

    /**
     * Sets gbraid
     *
     * @param string|null $gbraid gbraid
     *
     * @return self
     */
    public function setGbraid($gbraid)
    {
        if (is_null($gbraid)) {
            array_push($this->openAPINullablesSetToNull, 'gbraid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gbraid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gbraid) && (mb_strlen($gbraid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $gbraid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['gbraid'] = $gbraid;

        return $this;
    }

    /**
     * Gets gc_id
     *
     * @return string|null
     */
    public function getGcId()
    {
        return $this->container['gc_id'];
    }

    /**
     * Sets gc_id
     *
     * @param string|null $gc_id gc_id
     *
     * @return self
     */
    public function setGcId($gc_id)
    {
        if (is_null($gc_id)) {
            array_push($this->openAPINullablesSetToNull, 'gc_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gc_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gc_id) && (mb_strlen($gc_id) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $gc_id when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['gc_id'] = $gc_id;

        return $this;
    }

    /**
     * Gets gclid
     *
     * @return string|null
     */
    public function getGclid()
    {
        return $this->container['gclid'];
    }

    /**
     * Sets gclid
     *
     * @param string|null $gclid gclid
     *
     * @return self
     */
    public function setGclid($gclid)
    {
        if (is_null($gclid)) {
            array_push($this->openAPINullablesSetToNull, 'gclid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gclid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gclid) && (mb_strlen($gclid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $gclid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['gclid'] = $gclid;

        return $this;
    }

    /**
     * Gets rdt_cid
     *
     * @return string|null
     */
    public function getRdtCid()
    {
        return $this->container['rdt_cid'];
    }

    /**
     * Sets rdt_cid
     *
     * @param string|null $rdt_cid rdt_cid
     *
     * @return self
     */
    public function setRdtCid($rdt_cid)
    {
        if (is_null($rdt_cid)) {
            array_push($this->openAPINullablesSetToNull, 'rdt_cid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rdt_cid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($rdt_cid) && (mb_strlen($rdt_cid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $rdt_cid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['rdt_cid'] = $rdt_cid;

        return $this;
    }

    /**
     * Gets host
     *
     * @return string|null
     */
    public function getHost()
    {
        return $this->container['host'];
    }

    /**
     * Sets host
     *
     * @param string|null $host host
     *
     * @return self
     */
    public function setHost($host)
    {
        if (is_null($host)) {
            array_push($this->openAPINullablesSetToNull, 'host');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('host', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($host) && (mb_strlen($host) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $host when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['host'] = $host;

        return $this;
    }

    /**
     * Gets ip
     *
     * @return string|null
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string|null $ip ip
     *
     * @return self
     */
    public function setIp($ip)
    {
        if (is_null($ip)) {
            array_push($this->openAPINullablesSetToNull, 'ip');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ip', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ip) && (mb_strlen($ip) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $ip when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets msclkid
     *
     * @return string|null
     */
    public function getMsclkid()
    {
        return $this->container['msclkid'];
    }

    /**
     * Sets msclkid
     *
     * @param string|null $msclkid The MSCLKID that led to the conversion (see below for click ID information). The MSCLKID is a GUID (32 characters) that is unique for each ad click
     *
     * @return self
     */
    public function setMsclkid($msclkid)
    {
        if (is_null($msclkid)) {
            array_push($this->openAPINullablesSetToNull, 'msclkid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('msclkid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($msclkid) && (mb_strlen($msclkid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $msclkid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['msclkid'] = $msclkid;

        return $this;
    }

    /**
     * Gets li_fat_id
     *
     * @return string|null
     */
    public function getLiFatId()
    {
        return $this->container['li_fat_id'];
    }

    /**
     * Sets li_fat_id
     *
     * @param string|null $li_fat_id The LinkedIn Fat ID that led to the conversion (see below for click ID information). The Fat ID is a GUID (32 characters) that is unique for each ad click
     *
     * @return self
     */
    public function setLiFatId($li_fat_id)
    {
        if (is_null($li_fat_id)) {
            array_push($this->openAPINullablesSetToNull, 'li_fat_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('li_fat_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($li_fat_id) && (mb_strlen($li_fat_id) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $li_fat_id when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['li_fat_id'] = $li_fat_id;

        return $this;
    }

    /**
     * Gets pathname
     *
     * @return string|null
     */
    public function getPathname()
    {
        return $this->container['pathname'];
    }

    /**
     * Sets pathname
     *
     * @param string|null $pathname pathname
     *
     * @return self
     */
    public function setPathname($pathname)
    {
        if (is_null($pathname)) {
            array_push($this->openAPINullablesSetToNull, 'pathname');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pathname', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pathname) && (mb_strlen($pathname) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $pathname when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['pathname'] = $pathname;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return string|null
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param string|null $referrer The referrer URL of the current page
     *
     * @return self
     */
    public function setReferrer($referrer)
    {
        if (is_null($referrer)) {
            array_push($this->openAPINullablesSetToNull, 'referrer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referrer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($referrer) && (mb_strlen($referrer) > 3500)) {
            throw new \InvalidArgumentException('invalid length for $referrer when calling TrackRequestDefaultProperties., must be smaller than or equal to 3500.');
        }

        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets screen_height
     *
     * @return float|null
     */
    public function getScreenHeight()
    {
        return $this->container['screen_height'];
    }

    /**
     * Sets screen_height
     *
     * @param float|null $screen_height screen_height
     *
     * @return self
     */
    public function setScreenHeight($screen_height)
    {
        if (is_null($screen_height)) {
            array_push($this->openAPINullablesSetToNull, 'screen_height');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('screen_height', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['screen_height'] = $screen_height;

        return $this;
    }

    /**
     * Gets screen_width
     *
     * @return float|null
     */
    public function getScreenWidth()
    {
        return $this->container['screen_width'];
    }

    /**
     * Sets screen_width
     *
     * @param float|null $screen_width screen_width
     *
     * @return self
     */
    public function setScreenWidth($screen_width)
    {
        if (is_null($screen_width)) {
            array_push($this->openAPINullablesSetToNull, 'screen_width');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('screen_width', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['screen_width'] = $screen_width;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($title) && (mb_strlen($title) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $title when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string|null
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string|null $user_agent user_agent
     *
     * @return self
     */
    public function setUserAgent($user_agent)
    {
        if (is_null($user_agent)) {
            array_push($this->openAPINullablesSetToNull, 'user_agent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_agent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets user_agent_full_list
     *
     * @return string|null
     */
    public function getUserAgentFullList()
    {
        return $this->container['user_agent_full_list'];
    }

    /**
     * Sets user_agent_full_list
     *
     * @param string|null $user_agent_full_list user_agent_full_list
     *
     * @return self
     */
    public function setUserAgentFullList($user_agent_full_list)
    {
        if (is_null($user_agent_full_list)) {
            array_push($this->openAPINullablesSetToNull, 'user_agent_full_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_agent_full_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($user_agent_full_list) && (mb_strlen($user_agent_full_list) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $user_agent_full_list when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['user_agent_full_list'] = $user_agent_full_list;

        return $this;
    }

    /**
     * Gets utm_campaign
     *
     * @return string|null
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     *
     * @param string|null $utm_campaign utm_campaign
     *
     * @return self
     */
    public function setUtmCampaign($utm_campaign)
    {
        if (is_null($utm_campaign)) {
            array_push($this->openAPINullablesSetToNull, 'utm_campaign');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utm_campaign', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($utm_campaign) && (mb_strlen($utm_campaign) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $utm_campaign when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }

    /**
     * Gets utm_content
     *
     * @return string|null
     */
    public function getUtmContent()
    {
        return $this->container['utm_content'];
    }

    /**
     * Sets utm_content
     *
     * @param string|null $utm_content utm_content
     *
     * @return self
     */
    public function setUtmContent($utm_content)
    {
        if (is_null($utm_content)) {
            array_push($this->openAPINullablesSetToNull, 'utm_content');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utm_content', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($utm_content) && (mb_strlen($utm_content) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $utm_content when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['utm_content'] = $utm_content;

        return $this;
    }

    /**
     * Gets utm_medium
     *
     * @return string|null
     */
    public function getUtmMedium()
    {
        return $this->container['utm_medium'];
    }

    /**
     * Sets utm_medium
     *
     * @param string|null $utm_medium utm_medium
     *
     * @return self
     */
    public function setUtmMedium($utm_medium)
    {
        if (is_null($utm_medium)) {
            array_push($this->openAPINullablesSetToNull, 'utm_medium');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utm_medium', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($utm_medium) && (mb_strlen($utm_medium) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $utm_medium when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['utm_medium'] = $utm_medium;

        return $this;
    }

    /**
     * Gets utm_name
     *
     * @return string|null
     */
    public function getUtmName()
    {
        return $this->container['utm_name'];
    }

    /**
     * Sets utm_name
     *
     * @param string|null $utm_name utm_name
     *
     * @return self
     */
    public function setUtmName($utm_name)
    {
        if (is_null($utm_name)) {
            array_push($this->openAPINullablesSetToNull, 'utm_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utm_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($utm_name) && (mb_strlen($utm_name) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $utm_name when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['utm_name'] = $utm_name;

        return $this;
    }

    /**
     * Gets ttclid
     *
     * @return string|null
     */
    public function getTtclid()
    {
        return $this->container['ttclid'];
    }

    /**
     * Sets ttclid
     *
     * @param string|null $ttclid ttclid
     *
     * @return self
     */
    public function setTtclid($ttclid)
    {
        if (is_null($ttclid)) {
            array_push($this->openAPINullablesSetToNull, 'ttclid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ttclid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ttclid) && (mb_strlen($ttclid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $ttclid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['ttclid'] = $ttclid;

        return $this;
    }

    /**
     * Gets utm_source
     *
     * @return string|null
     */
    public function getUtmSource()
    {
        return $this->container['utm_source'];
    }

    /**
     * Sets utm_source
     *
     * @param string|null $utm_source utm_source
     *
     * @return self
     */
    public function setUtmSource($utm_source)
    {
        if (is_null($utm_source)) {
            array_push($this->openAPINullablesSetToNull, 'utm_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utm_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($utm_source) && (mb_strlen($utm_source) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $utm_source when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['utm_source'] = $utm_source;

        return $this;
    }

    /**
     * Gets utm_term
     *
     * @return string|null
     */
    public function getUtmTerm()
    {
        return $this->container['utm_term'];
    }

    /**
     * Sets utm_term
     *
     * @param string|null $utm_term utm_term
     *
     * @return self
     */
    public function setUtmTerm($utm_term)
    {
        if (is_null($utm_term)) {
            array_push($this->openAPINullablesSetToNull, 'utm_term');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('utm_term', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($utm_term) && (mb_strlen($utm_term) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $utm_term when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['utm_term'] = $utm_term;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        if (is_null($version)) {
            array_push($this->openAPINullablesSetToNull, 'version');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('version', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($version) && (mb_strlen($version) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $version when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets wbraid
     *
     * @return string|null
     */
    public function getWbraid()
    {
        return $this->container['wbraid'];
    }

    /**
     * Sets wbraid
     *
     * @param string|null $wbraid ?wbraid=1
     *
     * @return self
     */
    public function setWbraid($wbraid)
    {
        if (is_null($wbraid)) {
            array_push($this->openAPINullablesSetToNull, 'wbraid');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('wbraid', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($wbraid) && (mb_strlen($wbraid) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $wbraid when calling TrackRequestDefaultProperties., must be smaller than or equal to 2000.');
        }

        $this->container['wbraid'] = $wbraid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


