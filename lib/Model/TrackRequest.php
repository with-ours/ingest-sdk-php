<?php
/**
 * TrackRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Ours
 *
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@oursprivacy.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TrackRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TrackRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'track_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'event' => 'string',
        'token' => 'string',
        'user_id' => 'string',
        'external_id' => 'string',
        'email' => 'string',
        'event_properties' => 'array<string,mixed>',
        'user_properties' => '\OpenAPI\Client\Model\TrackRequestUserProperties',
        'default_properties' => '\OpenAPI\Client\Model\TrackRequestDefaultProperties',
        'distinct_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'event' => null,
        'token' => null,
        'user_id' => null,
        'external_id' => null,
        'email' => null,
        'event_properties' => null,
        'user_properties' => null,
        'default_properties' => null,
        'distinct_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'event' => false,
        'token' => false,
        'user_id' => true,
        'external_id' => true,
        'email' => true,
        'event_properties' => true,
        'user_properties' => true,
        'default_properties' => true,
        'distinct_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event' => 'event',
        'token' => 'token',
        'user_id' => 'userId',
        'external_id' => 'externalId',
        'email' => 'email',
        'event_properties' => 'eventProperties',
        'user_properties' => 'userProperties',
        'default_properties' => 'defaultProperties',
        'distinct_id' => 'distinctId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event' => 'setEvent',
        'token' => 'setToken',
        'user_id' => 'setUserId',
        'external_id' => 'setExternalId',
        'email' => 'setEmail',
        'event_properties' => 'setEventProperties',
        'user_properties' => 'setUserProperties',
        'default_properties' => 'setDefaultProperties',
        'distinct_id' => 'setDistinctId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event' => 'getEvent',
        'token' => 'getToken',
        'user_id' => 'getUserId',
        'external_id' => 'getExternalId',
        'email' => 'getEmail',
        'event_properties' => 'getEventProperties',
        'user_properties' => 'getUserProperties',
        'default_properties' => 'getDefaultProperties',
        'distinct_id' => 'getDistinctId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('event_properties', $data ?? [], null);
        $this->setIfExists('user_properties', $data ?? [], null);
        $this->setIfExists('default_properties', $data ?? [], null);
        $this->setIfExists('distinct_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['event'] === null) {
            $invalidProperties[] = "'event' can't be null";
        }
        if ((mb_strlen($this->container['event']) > 1000)) {
            $invalidProperties[] = "invalid value for 'event', the character length must be smaller than or equal to 1000.";
        }

        if ((mb_strlen($this->container['event']) < 1)) {
            $invalidProperties[] = "invalid value for 'event', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['token'] === null) {
            $invalidProperties[] = "'token' can't be null";
        }
        if ((mb_strlen($this->container['token']) > 250)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be smaller than or equal to 250.";
        }

        if ((mb_strlen($this->container['token']) < 1)) {
            $invalidProperties[] = "invalid value for 'token', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['user_id']) && (mb_strlen($this->container['user_id']) > 400)) {
            $invalidProperties[] = "invalid value for 'user_id', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['user_id']) && (mb_strlen($this->container['user_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) > 400)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['external_id']) && (mb_strlen($this->container['external_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'external_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 1000)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 1)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['distinct_id']) && (mb_strlen($this->container['distinct_id']) > 400)) {
            $invalidProperties[] = "invalid value for 'distinct_id', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['distinct_id']) && (mb_strlen($this->container['distinct_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'distinct_id', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event
     *
     * @return string
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string $event The name of the event you're tracking. This must be whitelisted in the Ours dashboard.
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        if ((mb_strlen($event) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $event when calling TrackRequest., must be smaller than or equal to 1000.');
        }
        if ((mb_strlen($event) < 1)) {
            throw new \InvalidArgumentException('invalid length for $event when calling TrackRequest., must be bigger than or equal to 1.');
        }

        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string $token The token for your Ours Privacy Source. You can find this in the Ours dashboard.
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        if ((mb_strlen($token) > 250)) {
            throw new \InvalidArgumentException('invalid length for $token when calling TrackRequest., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($token) < 1)) {
            throw new \InvalidArgumentException('invalid length for $token when calling TrackRequest., must be bigger than or equal to 1.');
        }

        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            array_push($this->openAPINullablesSetToNull, 'user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($user_id) && (mb_strlen($user_id) > 400)) {
            throw new \InvalidArgumentException('invalid length for $user_id when calling TrackRequest., must be smaller than or equal to 400.');
        }
        if (!is_null($user_id) && (mb_strlen($user_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_id when calling TrackRequest., must be bigger than or equal to 1.');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id The externalId (the ID in your system) of a user. We will associate this event with the user or create a user. If included in the request, email lookup is ignored.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            array_push($this->openAPINullablesSetToNull, 'external_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($external_id) && (mb_strlen($external_id) > 400)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling TrackRequest., must be smaller than or equal to 400.');
        }
        if (!is_null($external_id) && (mb_strlen($external_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $external_id when calling TrackRequest., must be bigger than or equal to 1.');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The email address of a user. We will associate this event with the user or create a user. Used for lookup if externalId and userId are not included in the request.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email) && (mb_strlen($email) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $email when calling TrackRequest., must be smaller than or equal to 1000.');
        }
        if (!is_null($email) && (mb_strlen($email) < 1)) {
            throw new \InvalidArgumentException('invalid length for $email when calling TrackRequest., must be bigger than or equal to 1.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets event_properties
     *
     * @return array<string,mixed>|null
     */
    public function getEventProperties()
    {
        return $this->container['event_properties'];
    }

    /**
     * Sets event_properties
     *
     * @param array<string,mixed>|null $event_properties Any additional event properties you want to pass along.
     *
     * @return self
     */
    public function setEventProperties($event_properties)
    {
        if (is_null($event_properties)) {
            array_push($this->openAPINullablesSetToNull, 'event_properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event_properties'] = $event_properties;

        return $this;
    }

    /**
     * Gets user_properties
     *
     * @return \OpenAPI\Client\Model\TrackRequestUserProperties|null
     */
    public function getUserProperties()
    {
        return $this->container['user_properties'];
    }

    /**
     * Sets user_properties
     *
     * @param \OpenAPI\Client\Model\TrackRequestUserProperties|null $user_properties user_properties
     *
     * @return self
     */
    public function setUserProperties($user_properties)
    {
        if (is_null($user_properties)) {
            array_push($this->openAPINullablesSetToNull, 'user_properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['user_properties'] = $user_properties;

        return $this;
    }

    /**
     * Gets default_properties
     *
     * @return \OpenAPI\Client\Model\TrackRequestDefaultProperties|null
     */
    public function getDefaultProperties()
    {
        return $this->container['default_properties'];
    }

    /**
     * Sets default_properties
     *
     * @param \OpenAPI\Client\Model\TrackRequestDefaultProperties|null $default_properties default_properties
     *
     * @return self
     */
    public function setDefaultProperties($default_properties)
    {
        if (is_null($default_properties)) {
            array_push($this->openAPINullablesSetToNull, 'default_properties');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_properties', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['default_properties'] = $default_properties;

        return $this;
    }

    /**
     * Gets distinct_id
     *
     * @return string|null
     */
    public function getDistinctId()
    {
        return $this->container['distinct_id'];
    }

    /**
     * Sets distinct_id
     *
     * @param string|null $distinct_id A unique identifier for the event. This helps prevent duplicate events.
     *
     * @return self
     */
    public function setDistinctId($distinct_id)
    {
        if (is_null($distinct_id)) {
            array_push($this->openAPINullablesSetToNull, 'distinct_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('distinct_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($distinct_id) && (mb_strlen($distinct_id) > 400)) {
            throw new \InvalidArgumentException('invalid length for $distinct_id when calling TrackRequest., must be smaller than or equal to 400.');
        }
        if (!is_null($distinct_id) && (mb_strlen($distinct_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $distinct_id when calling TrackRequest., must be bigger than or equal to 1.');
        }

        $this->container['distinct_id'] = $distinct_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


